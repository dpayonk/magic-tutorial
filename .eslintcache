[{"/home/dpayonk/src/magic-tutorial/src/index.js":"1","/home/dpayonk/src/magic-tutorial/src/reportWebVitals.js":"2","/home/dpayonk/src/magic-tutorial/src/App.js":"3","/home/dpayonk/src/magic-tutorial/src/layout.js":"4","/home/dpayonk/src/magic-tutorial/src/components/Loader.js":"5","/home/dpayonk/src/magic-tutorial/src/routes/LoginIndex.js":"6","/home/dpayonk/src/magic-tutorial/src/routes/HomeIndex.js":"7","/home/dpayonk/src/magic-tutorial/src/routes/UserHomeIndex.js":"8","/home/dpayonk/src/magic-tutorial/src/services/AuthService.ts":"9","/home/dpayonk/src/magic-tutorial/src/services/AccountProfileService.ts":"10","/home/dpayonk/src/magic-tutorial/src/models/AccountProfile.ts":"11","/home/dpayonk/src/magic-tutorial/src/Configuration.ts":"12","/home/dpayonk/src/magic-tutorial/src/components/AuthForm.js":"13","/home/dpayonk/src/magic-tutorial/src/components/MagicProfileComponent.js":"14","/home/dpayonk/src/magic-tutorial/src/models/AuthenticationProfile.ts":"15","/home/dpayonk/src/magic-tutorial/src/routes/HealthcheckIndex.js":"16"},{"size":500,"mtime":1611759565200,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1611759565200,"results":"19","hashOfConfig":"18"},{"size":2632,"mtime":1612057495460,"results":"20","hashOfConfig":"18"},{"size":1662,"mtime":1612040892540,"results":"21","hashOfConfig":"18"},{"size":2900,"mtime":1611792698930,"results":"22","hashOfConfig":"18"},{"size":5523,"mtime":1612043537010,"results":"23","hashOfConfig":"18"},{"size":838,"mtime":1612030337270,"results":"24","hashOfConfig":"18"},{"size":6391,"mtime":1612058259840,"results":"25","hashOfConfig":"18"},{"size":3788,"mtime":1612043842840,"results":"26","hashOfConfig":"18"},{"size":5045,"mtime":1612042598430,"results":"27","hashOfConfig":"18"},{"size":1600,"mtime":1612040431360,"results":"28","hashOfConfig":"18"},{"size":302,"mtime":1612052321040,"results":"29","hashOfConfig":"18"},{"size":4995,"mtime":1612057521100,"results":"30","hashOfConfig":"18"},{"size":2618,"mtime":1612042945660,"results":"31","hashOfConfig":"18"},{"size":618,"mtime":1611958349697,"results":"32","hashOfConfig":"18"},{"size":2687,"mtime":1612030009940,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"geaatu",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"36"},"/home/dpayonk/src/magic-tutorial/src/index.js",[],["75","76"],"/home/dpayonk/src/magic-tutorial/src/reportWebVitals.js",[],"/home/dpayonk/src/magic-tutorial/src/App.js",[],"/home/dpayonk/src/magic-tutorial/src/layout.js",["77"],"import React from 'react';\n\nexport default ({ children, location, backgroundImage }) => {\n    let defaultBackgroundImage = 'https://imgix.cosmicjs.com/d8ce4010-39c8-11eb-9ccb-e16da6a16ff7-EFFECTS.jpg?w=2000'\n\n    let footer = (\n        <footer\n            style={{\n                textAlign: 'center',\n                padding: `0 20px 80px 0`,\n            }}\n        >\n\n        </footer>\n    )\n    let header = (\n        <nav style={{ padding: \"3px 14px\", position: \"absolute\", width: \"100%\", zIndex: \"100\" }}>\n            <a style={{ color: 'white',}} href=\"/\">\n            My Magic Tutorial\n            </a>\n        </nav>\n    );\n\n    if (backgroundImage === undefined) {\n        backgroundImage = defaultBackgroundImage\n    }\n\n    return (\n        <div>\n            {header}\n            <section className=\"hero\">\n                <div className=\"hero-body\"\n                    style={{\n                        width: \"100%\", height: \"24.5rem\",\n                        backgroundImage: `url('${backgroundImage}')`,\n                        backgroundSize: \"cover\",\n                        backgroundPosition: \"right\",\n\n                        position: \"relative\",\n                        marginBottom: \"2.625rem\"\n                    }}>\n                </div>\n            </section>\n            <div\n                style={{\n                    minWidth: '75vw',\n                    maxWidth: '75vw',\n                    marginLeft: 'auto',\n                    marginRight: 'auto',\n                    minHeight: 'calc(100vh - 42px)',\n                }}\n            >\n                {children}\n            </div >\n            {footer}\n        </div >\n    )\n}\n","/home/dpayonk/src/magic-tutorial/src/components/Loader.js",[],"/home/dpayonk/src/magic-tutorial/src/routes/LoginIndex.js",["78"],"import React from 'react'\nimport Layout from '../layout'\nimport Loader from '../components/Loader';\nimport AuthForm from '../components/AuthForm';\nimport { Logger } from 'payonkjs';\nimport AuthService from '../services/AuthService';\nimport AccountProfileService from '../services/AccountProfileService';\nimport { UserRepository } from 'payonkjs';\n\nclass LoginIndex extends React.Component {\n    // User should already be authenticated and validated from the app.js\n    // consider changing this to a confirmation page of sorts to enter in \n    // other information and create/edit or tutorial\n    // props.onLogin\n    constructor(props) {\n        // props.onLogin for when user is logged in\n        super(props);\n        const environment = 'development';\n        this.state = {\n            environment: environment,\n            status: \"initialized\",\n            isLoggedIn: false,\n            authenticationProfile: null,\n            alert: ((props.alert !== undefined && props.alert !== null) ? props.alert : \"\")\n        }\n        this.authService = AuthService.getInstance();\n        this.profileService = AccountProfileService.getInstance();\n\n        this.handleRefresh = this.handleRefresh.bind(this);\n        this.authEventHandler = this.authEventHandler.bind(this);\n    }\n\n    async componentDidMount() {\n        let isLoggedIn = await this.authService.isLoggedIn();\n        if (isLoggedIn) {\n            let authenticationProfile = await this.authService.getAuthenticationProfile();\n            if (authenticationProfile !== null) {\n                let authorized = await this.profileService.fetchAuthorizationStatus(authenticationProfile.emailAddress, 'feed');\n                this.setState({\n                    alert: 'Welcome back',\n                    authenticationProfile: authenticationProfile,\n                });\n\n                if (authorized === false) {\n                    this.setState({ alert: 'Sorry, but we could not fetch your profile at this time' });\n                    Logger.warn(`Check the backend in case it's not available.`);\n                } else {\n                    this.props.onLoginCallback();\n                    this.setState({ alert: `Welcome, this should default you to your home page` });\n                }\n            }\n        }\n\n        // if logged in, it should redirect\n        this.setState({ isLoggedIn: isLoggedIn, status: 'mounted' });\n    }\n\n    async handleRefresh() {\n\n        if (this.state.authenticationProfile !== null) {\n            let profileService = AccountProfileService.getInstance();\n            let accountProfile = await profileService.createProfile(this.state.authenticationProfile);\n            debugger;\n            if (accountProfile !== null) {\n                this.props.onLoginCallback();\n            } else {\n                this.setState({alert: 'There was a problem fetching your account profile'});\n            }\n        } else {\n            alert(\"Authentication Profile is null.  You're going to need to reauthenticate!\");\n        }\n    }\n\n    renderJWTWidget() {\n        let jwtToken = UserRepository.getJWT();\n        if (jwtToken === null || jwtToken === \"\") {\n            return (<div style={{ margin: \"30px\" }}>\n                <button onClick={this.handleRefresh} className=\"button is-secondary\">\n                    Create Profile\n                </button>\n            </div>);\n        } else {\n            return (<div>\n                <small>This should not be called.  An error occurred</small>\n                <button onClick={this.handleRefresh} className=\"button is-secondary\">\n                    Refresh Session\n                </button>\n            </div>);\n        }       \n    }\n\n    authEventHandler(emailAddress, didToken){\n        // This is the original screen, if you want to refresh the page\n        // or send to a new page, this is where to do it.\n        UserRepository.publishLogin(emailAddress, didToken);\n    }\n\n    render() {\n        let location = \"Login\";\n        let redirectRoute = '/home';\n\n        if (this.state.status !== 'mounted') {\n            return (<Loader />);\n        }\n\n        // Only is rendered when an accountProfile could not be fetched on the backend\n        if (this.state.isLoggedIn === true) {\n            return (\n                <Layout location={location}>\n                    <div className=\"container main-content\">\n                        <div>\n                            <h2>{this.state.alert}</h2>\n                        </div>\n                        <div className=\"columns has-text-centered\">\n                            <div className=\"column\">\n                                <div className=\"has-text-centered\">\n                                    <div style={{ margin: \"20px\" }}>Our server backend is down</div>\n                                    {this.renderJWTWidget()}\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                </Layout>\n            )\n        }\n\n        return (\n            <Layout location={location}>\n                <div className=\"main-content\">\n                    <div className=\"columns is-centered\">\n                        <div className=\"column is-full\">\n                            <h1>{this.state.alert}</h1>\n                            <AuthForm eventHandler={this.authEventHandler}/>\n                        </div>\n                    </div>\n                </div>\n            </Layout>\n        );\n\n    }\n}\n\nexport default LoginIndex\n","/home/dpayonk/src/magic-tutorial/src/routes/HomeIndex.js",[],"/home/dpayonk/src/magic-tutorial/src/routes/UserHomeIndex.js",["79","80","81"],"import React from 'react';\nimport { navigate } from \"@reach/router\"\nimport Loader from '../components/Loader';\nimport { Logger, UserRepository } from 'payonkjs';\n\nimport MagicProfileComponent from '../components/MagicProfileComponent';\nimport AccountProfileService from '../services/AccountProfileService';\nimport AuthService from '../services/AuthService';\nimport AuthenticationProfile from '../models/AuthenticationProfile';\nimport AccountProfile from '../models/AccountProfile';\nimport Layout from '../layout';\nimport FilerobotImageEditor from 'dpayonk-image-editor';\n\n\nclass UserHomeIndex extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let emailAddress = UserRepository.getEmailAddress();\n        let didToken = UserRepository.getDidToken();\n        let accountProfile = null;\n        let authenticationProfile = null;\n\n        if (emailAddress !== '' && didToken != '') {\n            // bootstrapping account from Local data first if available\n            // should include JWT token\n            accountProfile = new AccountProfile();\n            accountProfile.emailAddress = emailAddress;\n            accountProfile.didToken = didToken;\n\n            authenticationProfile = new AuthenticationProfile(\n                accountProfile.emailAddress,\n                accountProfile.didToken);\n        }\n\n        this.state = {\n            alert: \"Hello, stranger\",\n            accountProfile: accountProfile,\n            authenticationProfile: authenticationProfile,\n            editImageUrl: 'https://nyc3.digitaloceanspaces.com/com.payonk.clique/20210114-181146--20210114-174832--stephen-walker-unsplash.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=KSB4OEBLVBM6HPQGPVDM%2F20210115%2Fnyc3%2Fs3%2Faws4_request&X-Amz-Date=20210115T001146Z&X-Amz-Expires=6000&X-Amz-SignedHeaders=host&X-Amz-Signature=2920e95f97ee6d1cbc0895f42ebb181f483c901ffe43943004e327955d20e750',\n            showImageEditor: false,\n            status: 'initialized',\n            isShow: false\n        }\n        this.accountProfileService = AccountProfileService.getInstance();\n\n        this.handleUserChange = this.handleUserChange.bind(this);\n        this.handleRefresh = this.handleRefresh.bind(this);\n        this.toggleCreator = this.toggleCreator.bind(this);\n    }\n\n    toggleCreator(){\n        if(this.state.isShow === true){\n            this.setState({isShow: false});\n        } else {\n            this.setState({isShow: true});\n        }\n    }\n\n    async componentDidMount() {\n        let accountProfile = await this.accountProfileService.fetchMyProfile();\n\n        if (accountProfile !== null) {\n            this.setState({ status: 'mounted', accountProfile: accountProfile });\n        } else {\n            this.setState({ status: 'mounted', alert: 'An error occurred fetching profile' });\n        }\n    }\n\n    async handleUserChange() {\n        let authService = AuthService.getInstance();\n        let isLoggedIn = await authService.isLoggedIn();\n        debugger;\n        if (isLoggedIn === false) {\n            navigate('/login', { replace: true });\n            this.setState({ authenticationProfile: null, isLoggedIn: isLoggedIn });\n        }\n    }\n\n    async handleRefresh() {\n\n        if (this.state.authenticationProfile !== null) {\n            let profileService = AccountProfileService.getInstance();\n            let accountProfile = await profileService.createProfile(this.state.authenticationProfile);\n            this.setState({ accountProfile: accountProfile });\n        } else {\n            alert(\"Authentication Profile is null.  You're going to need to reauthenticate!\");\n        }\n    }\n\n    renderJWTWidget() {\n        let jwtToken = UserRepository.getJWT();\n        if (jwtToken === null || jwtToken === \"\") {\n            return (<div>\n                <button onClick={this.handleRefresh} className=\"button is-secondary\">\n                    Create Profile\n                </button>\n            </div>);\n        } else {\n            return (<div>\n                <button onClick={this.handleRefresh} className=\"button is-secondary\">\n                    Refresh Session\n                </button>\n            </div>);\n        }\n        return (<div>Session expires in</div>);\n    }\n\n\n    render() {\n        if (this.state.status !== 'mounted') {\n            return (<Loader title='Loading Home' />);\n        }\n        if (this.state.accountProfile === null) {\n            return (<div>There is no homepage to load</div>);\n        }\n\n        const accountProfile = this.state.accountProfile;\n        const authenticationProfile = this.state.authenticationProfile;\n\n        return (\n            <Layout>\n                <div className=\"container main-content\">\n                    <div className=\"columns is-centered\">\n                        <div className=\"column is-three-fifths\">\n                            <h1>My Home</h1>\n                            <h2>{this.state.alert}</h2>\n                            <p>Here is where authorized apps are displayed</p>\n                            <button className=\"button is-primary\" onClick={this.toggleCreator}>Edit a Photo</button>\n                            <FilerobotImageEditor\n                                show={this.state.isShow}\n                                onUpload={(img) => { console.log(img); }}\n                                src={this.state.editImageUrl}\n                                onClose={() => { this.setState({ isShow: false }); }}\n                            />\n                        </div>\n                        <div className=\"column is-two-fifths\">\n                            <div style={{ margin: \"0px 0px 10px 0px\" }} className=\"is-pulled-right\">\n                                {this.renderJWTWidget()}\n                            </div>\n                            <MagicProfileComponent\n                                emailAddress={accountProfile.emailAddress}\n                                publicAddress={authenticationProfile.publicAddress}\n                                didToken={authenticationProfile.didToken}\n                                onLogout={this.handleUserChange}\n                            />\n                        </div>\n\n                    </div>\n                    <div className=\"columns has-text-centered\">\n                    </div>\n                </div>\n            </Layout>\n        );\n    }\n}\n\nexport default UserHomeIndex;","/home/dpayonk/src/magic-tutorial/src/services/AuthService.ts",[],["82","83"],"/home/dpayonk/src/magic-tutorial/src/services/AccountProfileService.ts",["84"],"import {\n  Logger,\n  BaseService,\n  ISerializableObject,\n  IParsedResponse,\n  UserRepository,\n} from \"payonkjs\";\n\nimport AccountProfile from \"../models/AccountProfile\";\nimport AuthenticationProfile from \"../models/AuthenticationProfile\";\nimport Configuration from \"../Configuration\";\n\nclass AccountProfileService extends BaseService {\n  static SINGLETON: AccountProfileService;\n\n  static getInstance(): AccountProfileService {\n    if (this.SINGLETON !== undefined) {\n      return this.SINGLETON;\n    } else {\n      this.SINGLETON = new AccountProfileService(Configuration.BACKEND_URL);\n      return this.SINGLETON;\n    }\n  }\n\n  endpoints() {\n    const apiUrl = this.baseUrl;\n    return {\n      authorizedRouteUrl: { url: `${apiUrl}/user/authorized` },\n      myProfileRouteUrl: { url: `${apiUrl}/user/me` },\n      createProfileRouteUrl: { url: `${apiUrl}/profile/create` },\n    };\n  }\n\n  async apiPost(remoteUrl: string, requestSchema: any, responseObject:any): Promise<IParsedResponse>{\n    debugger;\n    return await super.apiPost(remoteUrl, requestSchema, responseObject);\n  }\n\n  generateHeaders() : Record<string, string> {\n    let originalResult = super.generateHeaders();\n\n    // Logger.debug('Overwrite headers');\n    let jwtToken = UserRepository.getJWT();\n    \n    if (jwtToken !== null && jwtToken !== \"\") {\n      return {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwtToken}`\n      };\n    }\n    Logger.info('JWT tokens are not currently present', jwtToken);\n    return {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  async createProfile(\n    authenticationProfile: AuthenticationProfile\n  ): Promise<ISerializableObject | null> {\n    // public_address: authenticationProfile.publicAddress,\n    // issuer: authenticationProfile.issuer\n    let createProfileRequestSchema = {\n      email_address: authenticationProfile.emailAddress,\n      did_token: authenticationProfile.didToken,\n      issuer: authenticationProfile.issuer,\n    };\n    try {\n      debugger;\n      let { ok, model, data, errors } = await this.apiPost(\n        this.endpoints().createProfileRouteUrl.url,\n        createProfileRequestSchema,\n        AccountProfile\n      );\n\n      if (ok && errors === \"\") {\n        if (data.jwt_token !== undefined) {\n          Logger.alert(`A new JWT token was issued`, data.jwt_token);\n          UserRepository.publishJWT(data.jwt_token);\n        }\n        return model;\n      }\n    } catch (error) {\n      Logger.error(`An exception occured creating profile`, error);\n    }\n    return null;\n  }\n\n  // could help with context (know who you are) vs. regular rest call\n  async fetchMyProfile(): Promise<AccountProfile | null> {\n    try {\n      // this should almost always have a jwt token\n      let { ok, model, errors } = await this.apiGet(\n        this.endpoints().myProfileRouteUrl.url,\n        { permission: \"my_profile\" },\n        AccountProfile\n      );\n\n      if (ok && errors === \"\") {\n        return model as AccountProfile;\n      } else {\n        Logger.warn(\n          \"AccountProfileService.fetchMyProfile: Permission error\",\n          errors\n        );\n        // This is mostly a permission error\n      }\n    } catch (error) {\n      Logger.error(\n        `AccountProfileService.fetchMyProfile: Exception in BaseService`,\n        error\n      );\n      return null;\n    }\n    return null;\n  }\n\n  async fetchAuthorizationStatus(\n    emailAddress: string,\n    permissionName: string\n  ): Promise<boolean> {\n    let variables = {\n      email_address: emailAddress,\n      permissionName: permissionName,\n    };\n    if (this.hasJWT() === false) {\n      Logger.alert(\"No token present.  A profile needs to be created.\", null);\n      return false;\n    }\n\n    Logger.info(\n      `Checking permission ${permissionName} for email:`,\n      emailAddress\n    );\n    try {\n      let response = await fetch(this.endpoints().authorizedRouteUrl.url, {\n        method: \"POST\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        headers: this.generateHeaders(),\n        body: JSON.stringify(variables),\n      });\n\n      let jsonResponse = await response.json();\n      Logger.info(`AuthService.getAuthorizationProfile:`, jsonResponse);\n      if (jsonResponse.data === undefined) {\n        throw new Error(\"Invalid Schema Response.  No data element defined\");\n      }\n\n      // responseSchema = {data: {authenticated: bool, authorized: bool}, errors: string}\n      let data = jsonResponse.data;\n\n      if (jsonResponse.errors === \"\") {\n        if (data.authorized !== undefined || data.authorized !== null) {\n          return data.authorized;\n        }\n      } else {\n        Logger.error(\n          \"AccountProfileService.fetchAuthorizationStatus: Error in response\",\n          jsonResponse.errors\n        );\n      }\n    } catch (error) {\n      Logger.error(\n        \"An exception occurred trying to obtain authorization\",\n        error\n      );\n      // may need to set serverHealth to false\n    }\n    return false; // only returns true on happy path\n  }\n}\n\nexport default AccountProfileService;\n","/home/dpayonk/src/magic-tutorial/src/models/AccountProfile.ts",[],["85","86"],"/home/dpayonk/src/magic-tutorial/src/Configuration.ts",[],"/home/dpayonk/src/magic-tutorial/src/components/AuthForm.js",[],"/home/dpayonk/src/magic-tutorial/src/components/MagicProfileComponent.js",["87"],"import React from 'react'\nimport { Logger, UserRepository } from 'payonkjs';\nimport AuthService from '../services/AuthService'\n\n\nexport default ({ emailAddress, publicAddress, didToken, onLogout }) => {\n    let alert = (didToken !== undefined && didToken !== \"\") ? \"\" : \"\";\n\n    function handleLogout() {\n        alert='Logging you out!';\n        let service = AuthService.getInstance();\n        UserRepository.clearAll();\n\n        debugger;\n        service.logout();\n        if (onLogout !== undefined){\n            onLogout();\n            Logger.alert(\"You have been logged out!\");\n        }\n\n        debugger;\n    };\n\n    return (\n        <div>\n\n            <div className=\"field\">\n                <div className=\"control\">\n                    <button onClick={handleLogout} className=\"button button-primary is-pulled-right\">Logout</button>\n                    <div className=\"\">{alert}</div>\n                </div>\n            </div>\n\n            <div id=\"email-control\" className=\"field\">\n                <label className=\"label\">Email</label>\n                <div className=\"control has-icons-left\">\n                    <input readOnly=\"readonly\" value={emailAddress} className=\"input \" type=\"email\" name=\"email\"\n                        required=\"required\" placeholder=\"your@email.com\" />\n                    <span className=\"icon is-small is-left\">\n                        <i className=\"fas fa-envelope\"></i>\n                    </span>\n                </div>\n            </div>\n            <div id=\"public-address-control\" className=\"field\">\n                <label className=\"label\">Public Address</label>\n                <div className=\"control has-icons-left\">\n                    <input readOnly=\"readonly\" value={publicAddress}\n                        className=\"input \" name=\"publicAddress\"\n                        required=\"required\" />\n                    <span className=\"icon is-small is-left\">\n                        <i className=\"fas fa-lock\"></i>\n                    </span>\n                </div>\n\n            </div>\n            <div id=\"public-address-control\" className=\"field\">\n                <label className=\"label\">Magic Access Token (DID)</label>\n                <div className=\"control has-icons-left\">\n                    <input readOnly=\"readonly\" value={didToken}\n                        className=\"input \" name=\"publicAddress\"\n                        required=\"required\" />\n                    <span className=\"icon is-small is-left\">\n                        <i className=\"fas fa-lock\"></i>\n                    </span>\n                </div>\n            </div>\n        </div>\n    )\n}","/home/dpayonk/src/magic-tutorial/src/models/AuthenticationProfile.ts",[],"/home/dpayonk/src/magic-tutorial/src/routes/HealthcheckIndex.js",["88","89","90","91"],"import React from 'react'\nimport Layout from '../layout'\nimport Loader from '../components/Loader';\nimport AuthForm from '../components/AuthForm';\nimport { Logger } from 'payonkjs';\nimport AuthService from '../services/AuthService';\nimport AccountProfileService from '../services/AccountProfileService';\nimport Configuration from '../Configuration';\n\n\nclass HealthcheckIndex extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            status: \"initialized\",\n            isLoggedIn: false,\n            accountService: new AccountProfileService(),\n            alert: \"\"\n        }\n        this.authService = AuthService.getInstance();\n        this.profileService = AccountProfileService.getInstance();\n    }\n\n    async componentDidMount() {\n        let alert = \"\";\n\n        let isLoggedIn = await this.authService.isLoggedIn();\n        let healthy = await this.profileService.getHealth();\n        debugger;\n\n        if (isLoggedIn) {\n            alert = `Welcome Back`;\n            let authenticationProfile = await this.authService.getAuthenticationProfile();\n            if (authenticationProfile !== null) {\n                let authorized = await this.state.accountService.fetchAuthorizationStatus(authenticationProfile.emailAddress, 'feed');\n                this.setState({ emailAddress: authenticationProfile.emailAddress, feedAuthorization: authorized });\n            }\n        }\n\n\n        this.setState({ alert: alert, isLoggedIn: isLoggedIn, status: 'mounted' });\n    }\n\n    render() {\n        if (this.state.status !== 'mounted') {\n            return (<Loader title=\"Checking Health\" />);\n        }\n\n        if (this.state.isLoggedIn === true) {\n            return (\n\n                <div className=\"container main-content\">\n                    <div>\n                        <h2>{this.state.alert}</h2>\n                    </div>\n                    <div className=\"columns has-text-centered\">\n                        <div className=\"column\">\n                            <div className=\"has-text-centered\">\n                                <div>Install your apps</div>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n            )\n        } else {\n            return (\n\n                <div className=\"main-content\">\n                    <div className=\"columns is-centered\">\n                        <div className=\"column is-half\">\n                            <h1>Hello</h1>\n                            <AuthForm />\n                        </div>\n                    </div>\n                </div>\n\n            );\n        }\n    }\n}\n\nexport default HealthcheckIndex\n",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":3,"column":1,"nodeType":"98","endLine":58,"endColumn":2},{"ruleId":"99","severity":1,"message":"100","line":100,"column":13,"nodeType":"101","messageId":"102","endLine":100,"endColumn":26},{"ruleId":"99","severity":1,"message":"103","line":4,"column":10,"nodeType":"101","messageId":"102","endLine":4,"endColumn":16},{"ruleId":"104","severity":1,"message":"105","line":24,"column":45,"nodeType":"106","messageId":"107","endLine":24,"endColumn":47},{"ruleId":"108","severity":1,"message":"109","line":106,"column":9,"nodeType":"110","messageId":"111","endLine":106,"endColumn":48},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"112","severity":1,"message":"113","line":40,"column":9,"nodeType":"101","messageId":"102","endLine":40,"endColumn":23},{"ruleId":"92","replacedBy":"114"},{"ruleId":"94","replacedBy":"115"},{"ruleId":"96","severity":1,"message":"97","line":6,"column":1,"nodeType":"98","endLine":69,"endColumn":2},{"ruleId":"99","severity":1,"message":"116","line":2,"column":8,"nodeType":"101","messageId":"102","endLine":2,"endColumn":14},{"ruleId":"99","severity":1,"message":"103","line":5,"column":10,"nodeType":"101","messageId":"102","endLine":5,"endColumn":16},{"ruleId":"99","severity":1,"message":"117","line":8,"column":8,"nodeType":"101","messageId":"102","endLine":8,"endColumn":21},{"ruleId":"99","severity":1,"message":"118","line":28,"column":13,"nodeType":"101","messageId":"102","endLine":28,"endColumn":20},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'redirectRoute' is assigned a value but never used.","Identifier","unusedVar","'Logger' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","@typescript-eslint/no-unused-vars","'originalResult' is assigned a value but never used.",["119"],["120"],"'Layout' is defined but never used.","'Configuration' is defined but never used.","'healthy' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]