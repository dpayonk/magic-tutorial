[{"/home/dpayonk/src/pyvise-sandbox/magic_website/src/index.js":"1","/home/dpayonk/src/pyvise-sandbox/magic_website/src/App.js":"2","/home/dpayonk/src/pyvise-sandbox/magic_website/src/reportWebVitals.js":"3","/home/dpayonk/src/pyvise-sandbox/magic_website/src/layout.js":"4","/home/dpayonk/src/pyvise-sandbox/magic_website/src/components/Loader.js":"5","/home/dpayonk/src/pyvise-sandbox/magic_website/src/routes/LoginIndex.js":"6","/home/dpayonk/src/pyvise-sandbox/magic_website/src/services/AuthService.ts":"7","/home/dpayonk/src/pyvise-sandbox/magic_website/src/base/Logger.ts":"8","/home/dpayonk/src/pyvise-sandbox/magic_website/src/services/AccountProfileService.ts":"9","/home/dpayonk/src/pyvise-sandbox/magic_website/src/repository/UserRepository.ts":"10","/home/dpayonk/src/pyvise-sandbox/magic_website/src/base/StateStore.ts":"11","/home/dpayonk/src/pyvise-sandbox/magic_website/src/Configuration.ts":"12","/home/dpayonk/src/pyvise-sandbox/magic_website/src/base/BaseService.ts":"13","/home/dpayonk/src/pyvise-sandbox/magic_website/src/magic/AuthenticationProfile.ts":"14","/home/dpayonk/src/pyvise-sandbox/magic_website/src/models/AccountProfile.ts":"15","/home/dpayonk/src/pyvise-sandbox/magic_website/src/base/BaseMixins.ts":"16","/home/dpayonk/src/pyvise-sandbox/magic_website/src/routes/HomeIndex.js":"17","/home/dpayonk/src/pyvise-sandbox/magic_website/src/magic/MagicProfileComponent.js":"18","/home/dpayonk/src/pyvise-sandbox/magic_website/src/routes/UserHomeIndex.js":"19","/home/dpayonk/src/pyvise-sandbox/magic_website/src/magic/AuthForm.js":"20"},{"size":500,"mtime":1611759565200,"results":"21","hashOfConfig":"22"},{"size":2447,"mtime":1611792323810,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1611759565200,"results":"24","hashOfConfig":"22"},{"size":788,"mtime":1611781826550,"results":"25","hashOfConfig":"22"},{"size":2900,"mtime":1611792698930,"results":"26","hashOfConfig":"22"},{"size":3020,"mtime":1611791725180,"results":"27","hashOfConfig":"22"},{"size":3268,"mtime":1611781599200,"results":"28","hashOfConfig":"22"},{"size":3147,"mtime":1611779792850,"results":"29","hashOfConfig":"22"},{"size":4522,"mtime":1611795610220,"results":"30","hashOfConfig":"22"},{"size":2868,"mtime":1611780351980,"results":"31","hashOfConfig":"22"},{"size":2175,"mtime":1611779853510,"results":"32","hashOfConfig":"22"},{"size":217,"mtime":1611781016210,"results":"33","hashOfConfig":"22"},{"size":3874,"mtime":1611795680260,"results":"34","hashOfConfig":"22"},{"size":618,"mtime":1611779991930,"results":"35","hashOfConfig":"22"},{"size":1773,"mtime":1611799499300,"results":"36","hashOfConfig":"22"},{"size":1122,"mtime":1611800215140,"results":"37","hashOfConfig":"22"},{"size":697,"mtime":1611790451230,"results":"38","hashOfConfig":"22"},{"size":2722,"mtime":1611790357590,"results":"39","hashOfConfig":"22"},{"size":3876,"mtime":1611795455430,"results":"40","hashOfConfig":"22"},{"size":5041,"mtime":1611791758540,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"73d926",{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"61"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"61"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"44"},"/home/dpayonk/src/pyvise-sandbox/magic_website/src/index.js",[],["94","95"],"/home/dpayonk/src/pyvise-sandbox/magic_website/src/App.js",["96","97"],"import React from \"react\"\nimport { Router } from \"@reach/router\"\nimport Loader from \"./components/Loader\";\nimport Logger from './base/Logger';\nimport AuthForm from './magic/AuthForm';\nimport AuthService from \"./services/AuthService\";\nimport AccountProfileService from \"./services/AccountProfileService\";\nimport Layout from './layout';\nimport LoginIndex from './routes/LoginIndex';\nimport HomeIndex from './routes/HomeIndex';\nimport UserHomeIndex from './routes/UserHomeIndex';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoggedIn: false,\n      status: 'loading',\n    };\n    this.authService = new AuthService();\n\n    // This requires a lot of coordination, but the app is the only place we know \n    // we can subscribe to global updates (besides singletons loaded here? )\n    // perhaps instantiate statestore here?\n    // UserStore.onSessionUpdate(function (model) {\n    //   Logger.info(\"received update, new Model\", model);\n    //   self.setState({ userSession: model });\n    // });\n  }\n\n  async componentDidMount() {\n    let isLoggedIn = false;\n\n    try {\n\n      if (window.location.search.length > 0) {\n        // Looking for magic credential in query string\n        let authenticationProfile = await this.authService.onAuthenticationRedirectCallback();\n        let accountProfile = AccountProfileService.getInstance().createProfile(authenticationProfile);\n        Logger.alert('app.js: Create a new profile for you.', accountProfile);\n      }\n\n      isLoggedIn = await this.authService.isLoggedIn();\n    } catch (error) {\n      Logger.error(\"app.js: An exception occurred loading the app.\", error);\n    }\n\n    this.setState({\n      status: 'mounted', isLoggedIn: isLoggedIn, status: 'mounted'\n    });\n  }\n\n  render() {\n    let location = \"Home\";\n    if (this.state.status === 'loading') {\n      return (<Loader title=\"Hang tight, starting up the app!\" />)\n    }\n\n    if (this.state.status === 'mounted' && this.state.isLoggedIn === false) {\n      return (\n        <Layout location={location}>\n          <Router basepath=\"/\">\n            <LoginIndex path=\"/login\" />\n            <HomeIndex default path=\"/\" />\n          </Router>\n        </Layout>\n      );\n    }\n    // only returns if logged in\n    return (\n        <div id=\"root\">\n          <Router basepath=\"/\">\n            <UserHomeIndex default path=\"/\" />\n          </Router>\n        </div>\n    );\n  }\n}\n\nexport default App","/home/dpayonk/src/pyvise-sandbox/magic_website/src/reportWebVitals.js",[],"/home/dpayonk/src/pyvise-sandbox/magic_website/src/layout.js",["98"],"import React from 'react';\n\nexport default ({ children, location }) => {\n\n    let header = null;\n\n    return (\n           \n\n            <div>\n                {header}\n                < div\n                    style={{\n                        minWidth: '75vw',\n                        maxWidth: '75vw',\n                        marginLeft: 'auto',\n                        marginRight: 'auto',\n                        minHeight: 'calc(100vh - 42px)',\n                    }}\n                >\n                    {children}\n                </div >\n                <footer\n                    style={{\n                        textAlign: 'center',\n                        padding: `0 20px 80px 0`,\n                    }}\n                >\n\n                </footer>\n            </div >\n    )\n}\n","/home/dpayonk/src/pyvise-sandbox/magic_website/src/components/Loader.js",[],"/home/dpayonk/src/pyvise-sandbox/magic_website/src/routes/LoginIndex.js",["99"],"import React from 'react'\nimport Layout from '../layout'\nimport Loader from '../components/Loader';\nimport AuthForm from '../magic/AuthForm';\nimport Logger from '../base/Logger';\nimport AuthService from '../services/AuthService';\nimport AccountProfileService from '../services/AccountProfileService';\n\nclass LoginIndex extends React.Component {\n    // User should already be authenticated and validated from the app.js\n    // consider changing this to a confirmation page of sorts to enter in \n    // other information and create/edit or tutorial\n    constructor(props) {\n        super(props);\n        const environment = 'development';\n        this.state = {\n            environment: environment,\n            status: \"initialized\",\n            isLoggedIn: false,\n            accountService: new AccountProfileService(),\n            alert: \"\"\n        }\n        this.authService = AuthService.getInstance();\n    }\n\n    async componentDidMount() {\n        let alert = \"\";\n\n        let isLoggedIn = await this.authService.isLoggedIn();\n        if (isLoggedIn) {\n            alert = `Welcome Back`;\n            let authenticationProfile = await this.authService.getAuthenticationProfile();\n            if (authenticationProfile !== null) {\n                let authorized = await this.state.accountService.fetchAuthorizationStatus(authenticationProfile.emailAddress, 'feed');\n                this.setState({ emailAddress: authenticationProfile.emailAddress, feedAuthorization: authorized });\n            }\n        }\n\n\n        this.setState({ alert: alert, isLoggedIn: isLoggedIn, status: 'mounted' });\n    }\n\n    render() {\n        let location = \"Login\";\n\n        if (this.state.status !== 'mounted') {\n            return (<Loader />);\n        }\n\n        if (this.state.isLoggedIn === true) {\n            return (\n                <Layout location={location}>\n                    <div className=\"container main-content\">\n                        <div>\n                            <h2>{this.state.alert}</h2>\n                        </div>\n                        <div className=\"columns has-text-centered\">\n                            <div className=\"column\">\n                                <div className=\"has-text-centered\">\n                                    <div>Install your apps</div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                </Layout>\n            )\n        } else {\n            return (\n                <Layout location={location}>\n                    <div className=\"main-content\">\n                        <div className=\"columns is-centered\">\n                            <div className=\"column is-half\">\n                                <h1>Hello</h1>                                \n                                <AuthForm />\n                            </div>\n                        </div>\n                    </div>\n                </Layout>\n            );\n        }\n    }\n}\n\nexport default LoginIndex\n","/home/dpayonk/src/pyvise-sandbox/magic_website/src/services/AuthService.ts",["100"],"import { Magic } from 'magic-sdk';\nimport Logger from '../base/Logger';\nimport AuthenticationProfile from '../magic/AuthenticationProfile';\nimport UserRepository from '../repository/UserRepository';\nimport StateStore from '../base/StateStore';\nimport Configuration from '../Configuration';\n\n\nclass AuthService {\n    static SINGLETON: AuthService;\n    static getInstance() : AuthService {\n        if (this.SINGLETON !== undefined) {\n          return this.SINGLETON\n        } else {\n          this.SINGLETON = new AuthService()\n          return this.SINGLETON\n        }\n      }    \n  \n  constructor() {\n     \n  }\n\n  getMagicFactory() {\n    return new Magic(Configuration.MAGIC_PUBLISHABLE_KEY);\n  }\n\n  async isLoggedIn() {\n    const isLoggedIn = await this.getMagicFactory().user.isLoggedIn();\n    Logger.info(`AuthService.isLoggedIn():`, isLoggedIn);\n    return isLoggedIn;\n  }\n\n  async logout() {\n    let m = this.getMagicFactory();\n    m.user.logout();\n    // remove from localStorage as well\n    UserRepository.clearAuthentication();\n  }\n\n  async loginMagic(emailAddress: string) {\n    // Method to start authentication, \n    UserRepository.storeEmail(emailAddress);\n    let didToken = await this.getMagicFactory().auth.loginWithMagicLink({\n      email: emailAddress,\n      showUI: true,\n      redirectURI: this.getRedirectUri()\n    });\n    if(didToken !== null){\n      this.saveAuthentication(didToken);\n    }\n  }\n\n  // Move to AccountProfileService\n  async saveAuthentication(didToken: string): Promise<AuthenticationProfile | null> {\n    UserRepository.storeKey('didToken', didToken);\n    UserRepository.storeKey('updatedAt', new Date().toISOString());\n    let subscribers = StateStore.publishEvent('onLogin', {'didToken': didToken });\n    Logger.info(`Subscribers notified:`, subscribers);\n    let emailAddress = UserRepository.getEmailAddress();\n    if(emailAddress !== null){\n      return new AuthenticationProfile(emailAddress, didToken);\n    } else {\n      return null;\n    }\n  }\n\n  async onAuthenticationRedirectCallback(): Promise<AuthenticationProfile | null>  {\n    // Method called by redirect (from app.js)\n    let didToken = await this.getMagicFactory().auth.loginWithCredential();\n    if(didToken !== null){\n      let authenticationProfile = await this.saveAuthentication(didToken);\n      return authenticationProfile;  \n    }\n    return null;\n  }\n\n  getRedirectUri() {\n    const appUrl = Configuration.AUTH_CALLBACK_ROUTE;\n    return `${window.location.protocol}//${window.location.host}${appUrl}`;\n  }\n\n  async getAuthenticationProfile(): Promise<AuthenticationProfile | null> {\n    if (await this.isLoggedIn()) {\n      try {\n        const { issuer, email, publicAddress } = await this.getMagicFactory().user.getMetadata();\n        const didToken = await this.getMagicFactory().user.getIdToken();\n        if (email !== null && issuer !== null && publicAddress !== null){\n          let authProfile = new AuthenticationProfile(email, didToken);\n          authProfile.issuer = issuer;\n          authProfile.publicAddress = publicAddress;  \n          return authProfile;\n        }\n      } catch (error) {\n        Logger.error(`Auth service had a problem getting magic metadata`, error);\n      }\n    }\n    return null;\n  }\n}\n\n\nexport default AuthService",["101","102"],"/home/dpayonk/src/pyvise-sandbox/magic_website/src/base/Logger.ts",["103"],"\n\nclass Logger{\n    static debug: (message: any, obj: any) => void;\n    static info: (message: any, obj: any) => void;\n    static alert: (message: any, obj: any) => void;\n    static warn: (message: any, obj: any) => void;\n    static error: (message: any, exc: any) => void;\n    static redirectTo: (arr: any) => void;\n    static output: any;\n    static publishEvent: (eventKey: any, props: any) => any;\n    static subscribe: (eventKey: any, callback: any) => void;\n    static SUBSCRIBERS: any;\n\n    constructor(){\n        //console.log(\"Use Static Functions please\");\n    }\n\n    debug(message: string, obj: any){\n        Logger.debug(message, obj);\n    }\n\n    info(message: string, obj: any){\n        Logger.info(message, obj);\n    }\n\n    warn(message: string, obj: any){\n        Logger.warn(message, obj);\n    }\n\n    alert(message: string, obj: any){\n        Logger.alert(message, obj);\n    }\n\n    error(message: string, obj: any){\n        Logger.error(message, obj);\n    }\n\n}\n\nLogger.output = 'console';\n\n\nLogger.debug = function(message, obj){\n    if(obj !== undefined){\n        console.debug(message, obj)\n    } else {\n        console.debug(message);\n    }\n    Logger.publishEvent('debug',{message: message, obj: obj});\n}\n\n\nLogger.alert = function(message, obj){\n    if(obj !== undefined){\n        console.log(message, obj)\n    } else {\n        console.log(message);\n    }\n    Logger.publishEvent('alert',{message: message, obj: obj});\n}\n\n\nLogger.info = function(message, obj){\n    if(obj !== undefined){\n        console.log(message, obj)\n    } else {\n        console.log(message);\n    }\n    Logger.publishEvent('info',{message: message, obj: obj});\n}\n\n/* Dangerous because of infinite loop */\nLogger.warn = function(message, obj){\n    if(obj !== undefined){\n        console.warn(message, obj)\n    } else {\n        console.warn(message);\n    }\n    Logger.publishEvent('warn',{message: message, obj: obj});\n}\n\nLogger.error = function(message, exc){\n    console.error(message, exc);\n}\n\nLogger.redirectTo = function(arr){\n    Logger.output = arr;\n}\n\nLogger.subscribe = function (eventKey, callback) {\n    Logger.SUBSCRIBERS = Logger.SUBSCRIBERS || {};\n\n    if (Logger.SUBSCRIBERS[eventKey] !== undefined) {\n        Logger.SUBSCRIBERS[eventKey].push(callback);\n    } else {\n        Logger.SUBSCRIBERS[eventKey] = [];\n        Logger.SUBSCRIBERS[eventKey].push(callback);\n    }\n}\n\nLogger.publishEvent = function (eventKey, props) {\n\n    if (Logger.SUBSCRIBERS === undefined) {\n       console.log(`Initializing Logging subscribers`);\n       Logger.SUBSCRIBERS = Logger.SUBSCRIBERS || {};\n    }\n\n    if (Logger.SUBSCRIBERS[eventKey] !== undefined) {\n        Logger.SUBSCRIBERS[eventKey].forEach(function (callbackFunction: any, index: number) {\n            try {\n                let result = callbackFunction(props);\n                Logger.info('Completed publish callback', result);\n            } catch (error) {\n                Logger.error(`A subscriber to user updates failed:`, error);\n            }\n        });\n    } else {\n        Logger.SUBSCRIBERS[eventKey] = [];\n    }\n    return Logger.SUBSCRIBERS[eventKey].length;\n}\n\n\nexport default Logger","/home/dpayonk/src/pyvise-sandbox/magic_website/src/services/AccountProfileService.ts",["104"],"import Logger from \"../base/Logger\";\nimport AccountProfile from \"../models/AccountProfile\";\nimport AuthenticationProfile from \"../magic/AuthenticationProfile\";\nimport BaseService from \"../base/BaseService\";\nimport UserRepository from \"../repository/UserRepository\";\nimport { ISerializableObject, IParsedResponse } from \"../base/BaseInterfaces\";\nimport Configuration from \"../Configuration\";\n\nclass AccountProfileService extends BaseService {\n  static SINGLETON: AccountProfileService;\n\n  static getInstance(): AccountProfileService {\n    if (this.SINGLETON !== undefined) {\n      return this.SINGLETON;\n    } else {\n      this.SINGLETON = new AccountProfileService(Configuration.BACKEND_URL);\n      return this.SINGLETON;\n    }\n  }\n\n  endpoints() {\n    const apiUrl = this.baseUrl;\n    return {\n      authorizedRouteUrl: { url: `${apiUrl}/user/authorized` },\n      myProfileRouteUrl: { url: `${apiUrl}/user/me` },\n      createProfileRouteUrl: { url: `${apiUrl}/profile/create` },\n    };\n  }\n\n  async createProfile(\n    authenticationProfile: AuthenticationProfile\n  ): Promise<ISerializableObject | null> {\n    // public_address: authenticationProfile.publicAddress,\n    // issuer: authenticationProfile.issuer\n    let createProfileRequestSchema = {\n      email_address: authenticationProfile.emailAddress,\n      did_token: authenticationProfile.didToken,\n      issuer: authenticationProfile.issuer,\n    };\n    try {\n      let { ok, model, data, errors } = await this.apiPost(\n        this.endpoints().createProfileRouteUrl.url,\n        createProfileRequestSchema,\n        AccountProfile\n      );\n\n      if (ok && errors === \"\") {\n        if (data.jwt_token !== undefined) {\n          Logger.alert(`A new JWT token was issued`, data.jwt_token);\n          UserRepository.publishJWT(data.jwt_token);\n        }\n        return model;\n      }\n    } catch (error) {\n      Logger.error(`An exception occured creating profile`, error);\n    }\n    return null;\n  }\n\n  // could help with context (know who you are) vs. regular rest call\n  async fetchMyProfile(): Promise<AccountProfile | null> {\n    try {\n      let { ok, model, errors } = await this.apiGet(\n        this.endpoints().myProfileRouteUrl.url,\n        { permission: \"my_profile\" },\n        AccountProfile\n      );\n\n      if (ok && errors === \"\") {\n        return model as AccountProfile;\n      } else {\n        Logger.warn(\n          \"AccountProfileService.fetchMyProfile: Permission error\",\n          errors\n        );\n        // This is mostly a permission error\n      }\n    } catch (error) {\n      Logger.error(\n        `AccountProfileService.fetchMyProfile: Exception in BaseService`,\n        error\n      );\n      return null;\n    }\n    return null;\n  }\n\n  async fetchAuthorizationStatus(\n    emailAddress: string,\n    permissionName: string\n  ): Promise<boolean> {\n    let variables = {\n      email_address: emailAddress,\n      permissionName: permissionName,\n    };\n    if (this.hasJWT() === false) {\n      Logger.alert(\n        \"Checking authorization as a public user.  Please make sure to create a session\",\n        {}\n      );\n    }\n\n    Logger.info(\n      `Checking permission ${permissionName} for email:`,\n      emailAddress\n    );\n    try {\n      let response = await fetch(this.endpoints().authorizedRouteUrl.url, {\n        method: \"POST\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        headers: this.generateHeaders(),\n        body: JSON.stringify(variables),\n      });\n      let jsonResponse = await response.json();\n      Logger.info(`AuthService.getAuthorizationProfile:`, jsonResponse);\n      if (jsonResponse.data === undefined) {\n        throw new Error(\"Invalid Schema Response.  No data element defined\");\n      }\n      // [server url](payonk/controllers/is_authorized_url)\n      let data = jsonResponse.data; // changed to be more graphql like\n      // jsonResponse = {data: {authenticated: bool, authorized: bool}, errors: string}\n\n      if (jsonResponse.errors === \"\") {\n        if (data.authorized !== undefined || data.authorized !== null) {\n          return data.authorized;\n        }\n      } else {\n        Logger.error(\n          \"AccountProfileService.fetchAuthorizationStatus: Error in response\",\n          jsonResponse.errors\n        );\n      }\n    } catch (error) {\n      Logger.error(\n        \"An exception occurred trying to obtain authorization\",\n        error\n      );\n      // may need to set serverHealth to false\n    }\n    return false; // only returns true on happy path\n  }\n}\n\nexport default AccountProfileService;\n","/home/dpayonk/src/pyvise-sandbox/magic_website/src/repository/UserRepository.ts",["105","106"],"import Logger from \"../base/Logger\";\nimport AccountProfile from \"../models/AccountProfile\";\nimport AuthenticationProfile from \"../magic/AuthenticationProfile\";\n// import StateStore from '../StateStore';\n\nclass UserRepository {\n  static SUBSCRIBERS: any;\n  static storeKey(key: string, val: string) {\n    if (typeof window === `undefined`) {\n      console.log(\"NOOP, for gatsby\");\n    } else {\n      window.localStorage.setItem(key, val);\n    }\n  }\n\n  static getDidToken() {\n    const didToken =\n      typeof window === `undefined`\n        ? null\n        : window.localStorage.getItem(\"didToken\");\n    return didToken;\n  }\n  static getJWT() {\n    const jwtToken =\n      typeof window === `undefined`\n        ? null\n        : window.localStorage.getItem(\"jwtToken\");\n    if (jwtToken === undefined) {\n      return null;\n    }\n    return jwtToken;\n  }\n  static storeEmail(emailAddress: string) {\n    // if it exists, should throw a warning\n    // required for gatsby: https://www.gatsbyjs.com/docs/debugging-html-builds/\n    if (typeof window === `undefined`) {\n      console.log(\"NOOP, for gatsby\");\n    } else {\n      UserRepository.storeKey(\"emailAddress\", emailAddress);\n    }\n  }\n  static getEmailAddress(): string | null {\n    const emailAddress =\n      typeof window === `undefined`\n        ? null\n        : window.localStorage.getItem(\"emailAddress\");\n    return emailAddress;\n  };\n  \n  static loadUserSessionFromStorage: () => any;\n\n  static publishLogin(emailAddress: string, didToken: string) {\n    console.log(`Email: ${emailAddress}, Token: ${didToken}`);\n    debugger;\n  }\n\n  static onUpdate(callback: any) {\n    UserRepository.SUBSCRIBERS = UserRepository.SUBSCRIBERS || [];\n    UserRepository.SUBSCRIBERS.push(callback);\n  }\n\n  static storeJWT(jwtToken: string) {\n    if (typeof window === `undefined`) {\n      console.log(\"NOOP, for gatsby\");\n    } else {\n      UserRepository.storeKey(\"jwtToken\", jwtToken);\n    }\n  }\n\n  static clearAll() {\n    if (typeof window === `undefined`) {\n      console.log(\"NOOP, for gatsby\");\n    } else {\n      UserRepository.clearAuthentication();\n      window.localStorage.removeItem(\"jwtToken\");\n    }\n  }\n\n  static publishJWT(jwtToken: string) {\n    Logger.info(`New JWT token saved!`, jwtToken);\n    UserRepository.storeJWT(jwtToken);\n  };\n\n  static clearAuthentication() {\n    if (typeof window === `undefined`) {\n      console.log(\"NOOP, for gatsby\");\n    } else {\n      window.localStorage.removeItem(\"emailAddress\");\n      window.localStorage.removeItem(\"publicAddress\");\n      window.localStorage.removeItem(\"didToken\");\n    }\n  };\n}\n\n// UserRepository.onSessionUpdate = function(callback){\n//     StateStore.subscribe('session:update', callback);\n// }\n// UserRepository.publishNewSession = function(userSession){\n//     StateStore.publishEvent('session:update', userSession);\n// }\n\nexport default UserRepository;\n","/home/dpayonk/src/pyvise-sandbox/magic_website/src/base/StateStore.ts",[],"/home/dpayonk/src/pyvise-sandbox/magic_website/src/Configuration.ts",[],"/home/dpayonk/src/pyvise-sandbox/magic_website/src/base/BaseService.ts",[],"/home/dpayonk/src/pyvise-sandbox/magic_website/src/magic/AuthenticationProfile.ts",[],"/home/dpayonk/src/pyvise-sandbox/magic_website/src/models/AccountProfile.ts",[],"/home/dpayonk/src/pyvise-sandbox/magic_website/src/base/BaseMixins.ts",["107"],"/home/dpayonk/src/pyvise-sandbox/magic_website/src/routes/HomeIndex.js",[],"/home/dpayonk/src/pyvise-sandbox/magic_website/src/magic/MagicProfileComponent.js",["108"],"import React from 'react'\nimport Logger from '../base/Logger';\nimport AuthService from '../services/AuthService'\nimport UserRepository from '../repository/UserRepository'\n\n\nexport default ({ emailAddress, publicAddress, didToken }) => {\n// export default (p) => {\n    // let didToken = \"\";\n    // let publicAddress = \"\";\n    // let emailAddress = \"\";\n\n    let alert = (didToken !== undefined && didToken !== \"\") ? \"Logged In\" : \"\";\n\n    function handleLogout() {\n        debugger;\n        let service = AuthService.getInstance();\n        \n        service.logout();\n        // clear all local\n        UserRepository.clearAll();\n        Logger.alert(\"You have been logged out!\");\n        // console.log(\"redirect?\");\n    };\n\n\n\n    return (\n        <div>\n\n            <div className=\"field\">\n                <div className=\"control\">\n                    <button onClick={handleLogout} className=\"button button-primary is-pulled-right\">Logout</button>\n                    <div className=\"\">{alert}</div>\n                </div>\n            </div>\n\n            <div id=\"email-control\" className=\"field\">\n                <label className=\"label\">Email</label>\n                <div className=\"control has-icons-left\">\n                    <input readOnly=\"readonly\" value={emailAddress} className=\"input \" type=\"email\" name=\"email\"\n                        required=\"required\" placeholder=\"your@email.com\" />\n                    <span className=\"icon is-small is-left\">\n                        <i className=\"fas fa-envelope\"></i>\n                    </span>\n                </div>\n            </div>\n            <div id=\"public-address-control\" className=\"field\">\n                <label className=\"label\">Public Address</label>\n                <div className=\"control has-icons-left\">\n                    <input readOnly=\"readonly\" value={publicAddress}\n                        className=\"input \" name=\"publicAddress\"\n                        required=\"required\" />\n                    <span className=\"icon is-small is-left\">\n                        <i className=\"fas fa-lock\"></i>\n                    </span>\n                </div>\n\n            </div>\n            <div id=\"public-address-control\" className=\"field\">\n                <label className=\"label\">Magic Access Token (DID)</label>\n                <div className=\"control has-icons-left\">\n                    <input readOnly=\"readonly\" value={didToken}\n                        className=\"input \" name=\"publicAddress\"\n                        required=\"required\" />\n                    <span className=\"icon is-small is-left\">\n                        <i className=\"fas fa-lock\"></i>\n                    </span>\n                </div>\n            </div>\n        </div>\n    )\n}","/home/dpayonk/src/pyvise-sandbox/magic_website/src/routes/UserHomeIndex.js",["109","110"],"import React from 'react';\nimport Loader from '../components/Loader';\nimport MagicProfileComponent from '../magic/MagicProfileComponent';\nimport AccountProfileService from '../services/AccountProfileService';\nimport UserRepository from '../repository/UserRepository';\nimport AuthenticationProfile from '../magic/AuthenticationProfile';\nimport AccountProfile from '../models/AccountProfile';\n\n\nclass UserHomeIndex extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        let emailAddress = UserRepository.getEmailAddress();\n        let didToken = UserRepository.getDidToken();\n        let accountProfile = null;\n\n        if (emailAddress !== '' && didToken != '') {\n            // bootstrapping account from Local data first if available\n            // should include JWT token\n            accountProfile = new AccountProfile();\n            accountProfile.emailAddress = emailAddress;\n            accountProfile.didToken = didToken;\n        }\n\n        this.state = {\n            alert: \"Hello, your name here\",\n            accountProfile: accountProfile,\n            status: 'initialized'\n        }\n        this.accountProfileService = AccountProfileService.getInstance();\n\n\n\n        this.handleRefresh = this.handleRefresh.bind(this);\n    }\n\n    async componentDidMount() {\n        let accountProfile = await this.accountProfileService.fetchMyProfile();\n        debugger;\n        if(accountProfile !== null){\n            this.setState({ status: 'mounted', accountProfile: accountProfile });\n        } else {\n            this.setState({ status: 'mounted', alert: 'An error occurred fetching profile'});\n        }\n    }\n\n    async handleRefresh() {\n\n        debugger;\n        if (this.state.accountProfile !== null) {\n            debugger;\n            let authenticationProfile = new AuthenticationProfile(\n                this.state.accountProfile.emailAddress,\n                this.state.accountProfile.didToken);\n            let profileService = AccountProfileService.getInstance();\n            let accountProfile = await profileService.createProfile(authenticationProfile);\n            this.setState({ accountProfile: accountProfile });\n            debugger;\n        } else {\n            alert(\"call create\");\n\n        }\n    }\n\n    renderJWTWidget() {\n        let jwtToken = UserRepository.getJWT();\n        if (jwtToken === null || jwtToken === \"\") {\n            return (<div>\n                <button onClick={this.handleRefresh} className=\"button is-secondary\">\n                    Create Profile\n                </button>\n            </div>);\n        } else {\n            return (<div>\n                <button onClick={this.handleRefresh} className=\"button is-secondary\">\n                    Refresh Session\n                </button>\n            </div>);\n        }\n        return (<div>Session expires in</div>);\n    }\n\n\n    render() {\n        if (this.state.status !== 'mounted') {\n            return (<Loader title='Loading your profile' />);\n        }\n        let emailAddress = (this.state.accountProfile === null) ? \"\" : this.state.accountProfile.emailAddress;\n        debugger;\n        return (\n            <div className=\"container main-content\">\n                <div className=\"columns is-centered has-text-centered\">\n                    <div className=\"column is-four-fifths\">\n                        <h1>My Profile</h1>\n                        <h2>{this.state.alert}</h2>\n                        <MagicProfileComponent emailAddress={emailAddress} />\n                    </div>\n                    <div className=\"column is-one-fifths\">\n                        {this.renderJWTWidget()}\n                        Here is where authorized apps are displayed\n</div>\n\n                </div>\n                <div className=\"columns has-text-centered\">\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserHomeIndex;","/home/dpayonk/src/pyvise-sandbox/magic_website/src/magic/AuthForm.js",["111"],"import React, { Component } from \"react\"\nimport Loader from '../components/Loader';\nimport AuthService from '../services/AuthService'\nimport AccountProfileService from \"../services/AccountProfileService\";\nimport UserRepository from \"../repository/UserRepository\";\n\nclass AuthForm extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      alert: \"\",\n      authService: new AuthService(),\n      accountService: new AccountProfileService(),\n      emailInput: \"\",\n      fetchedAuthorization: false, isAuthorized: false,\n      fetchedLogin: false, isLoggedIn: false,\n      status: \"initialized\",\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleRegister = this.handleRegister.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.fetchLogin();\n    await this.fetchAuthorizationProfile();\n\n    if (this.state.authenticationProfile !== null) {\n      // This is too complex combiniing a profile with magic link, need better model\n      if (this.state.isAuthorized == true) {\n        this.setState({ emailInput: this.state.authenticationProfile.emailAddress });        \n      }\n    } else {\n      this.setState({ alert: \"Your profile could not be fetched\" });\n    }\n    this.setState({ status: 'mounted' });\n  }\n\n  async fetchLogin() {\n    if (this.state.fetchedLogin === false) {\n      const isLoggedIn = await this.state.authService.isLoggedIn();\n      this.setState({ isLoggedIn: isLoggedIn, fetchedLogin: true });\n      return isLoggedIn;\n    } else {\n      return this.state.isLoggedIn;       // fetch from cache\n    }\n  }\n\n  isValidEmail(emailText) {\n    return true;\n  }\n\n  async isAuthorized() {\n    if (this.state.fetchedAuthorization === false) {\n      await this.fetchAuthorizationProfile(); // authorization status set by getting profile\n      return this.state.isAuthorized;\n    } else {\n      return this.state.isAuthorized;       // fetch from cache\n    }\n  }\n\n  async fetchAuthorizationProfile() {\n    let isAuthorized = false;\n    let authenticationProfile = await this.state.authService.getAuthenticationProfile();\n\n    if (authenticationProfile !== null) {      \n      isAuthorized = await this.state.accountService.fetchAuthorizationStatus(authenticationProfile.emailAddress);\n      this.setState({\n        authenticationProfile: authenticationProfile,        \n      });\n    }\n    this.setState({ isAuthorized: isAuthorized, fetchedAuthorization: true });\n  }\n\n  handleChange(event) {\n    this.setState({ emailInput: event.target.value });\n  }\n\n  async handleRegister(e) {\n    e.preventDefault();\n    if (this.isValidEmail(this.state.emailInput)) {\n      this.setState({ alert: \"Starting auth process, setting email...\" });\n      let didToken = await this.state.authService.loginMagic(this.state.emailInput);\n      UserRepository.publishLogin(this.state.emailInput, didToken);\n      debugger;\n    }\n  };\n\n  render() {\n\n    if (this.state.status !== 'mounted') {\n      return (<Loader title=\"...\" />);\n    }\n\n    if (this.state.isLoggedIn && this.state.isAuthorized) {\n      return (<div className=\"container\" style={{ minHeight: \"150px\", marginBottom: \"5vh\" }}>\n        <label style={{ fontSize: \"1.3rem\", fontWeight: \"700\", paddingBottom: \"10px\" }}>\n          {this.state.alert}\n        </label>\n        <div><p style={{ textIndent: \"20px\" }}>\n          Check out the <a className=\"\" href=\"/app\"> private feed</a> for new pics!\n            </p>\n        </div>\n      </div>);\n    } else if (this.state.isLoggedIn === true && this.state.isAuthorized === false) {\n      return this.renderUnauthorized();\n    } else {\n      return this.renderLoginForm();\n    }\n  }\n\n  renderUnauthorized() {\n    let email = this.state.authenticationProfile.emailAddress;\n    return (\n      <div>\n        <p style={{ fontSize: \"1.4rem\", textIndent: \"10px\", maxWidth: \"600px\" }}>\n          We don't have your email address ({email}) on file yet.  \n          <br/><br/>\n          Give us a few minutes to authorize you.\n          If you're impatient, send us a message.\n            </p>\n      </div>\n    )\n  }\n\n  renderLoginForm() {\n    return (<div>\n      <p>Register with email</p>\n\n      <form>\n        <div className=\"field\">\n          <label className=\"label\">Email</label>\n          <div className=\"control has-icons-left\">\n            <input style={{maxWidth: \"400px\"}} value={this.state.emailInput} onChange={this.handleChange} className=\"input \" type=\"email\" name=\"email\"\n              required=\"required\" placeholder=\"your@email.com\" />\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-envelope\"></i>\n            </span>\n          </div>\n\n        </div>\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <div className=\"field\">\n              <button onClick={this.handleRegister} className=\"button is-light is-pull-right\" type=\"submit\">\n                Register\n          </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n    )\n  }\n};\n\n\nexport default AuthForm\n",{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":5,"column":8,"nodeType":"118","messageId":"119","endLine":5,"endColumn":16},{"ruleId":"120","severity":1,"message":"121","line":50,"column":50,"nodeType":"122","messageId":"123","endLine":50,"endColumn":56},{"ruleId":"124","severity":1,"message":"125","line":3,"column":1,"nodeType":"126","endLine":33,"endColumn":2},{"ruleId":"116","severity":1,"message":"127","line":5,"column":8,"nodeType":"118","messageId":"119","endLine":5,"endColumn":14},{"ruleId":"128","severity":1,"message":"129","line":20,"column":3,"nodeType":"130","messageId":"131","endLine":22,"endColumn":4},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"128","severity":1,"message":"129","line":15,"column":5,"nodeType":"130","messageId":"131","endLine":17,"endColumn":6},{"ruleId":"132","severity":1,"message":"133","line":6,"column":31,"nodeType":"118","messageId":"119","endLine":6,"endColumn":46},{"ruleId":"132","severity":1,"message":"134","line":2,"column":8,"nodeType":"118","messageId":"119","endLine":2,"endColumn":22},{"ruleId":"132","severity":1,"message":"135","line":3,"column":8,"nodeType":"118","messageId":"119","endLine":3,"endColumn":29},{"ruleId":"132","severity":1,"message":"127","line":3,"column":8,"nodeType":"118","messageId":"119","endLine":3,"endColumn":14},{"ruleId":"124","severity":1,"message":"125","line":7,"column":1,"nodeType":"126","endLine":73,"endColumn":2},{"ruleId":"136","severity":1,"message":"137","line":19,"column":45,"nodeType":"138","messageId":"123","endLine":19,"endColumn":47},{"ruleId":"139","severity":1,"message":"140","line":82,"column":9,"nodeType":"141","messageId":"142","endLine":82,"endColumn":48},{"ruleId":"136","severity":1,"message":"143","line":32,"column":35,"nodeType":"138","messageId":"123","endLine":32,"endColumn":37},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'AuthForm' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'status'.","ObjectExpression","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Logger' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","@typescript-eslint/no-unused-vars","'IParsedResponse' is defined but never used.","'AccountProfile' is defined but never used.","'AuthenticationProfile' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]