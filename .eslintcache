[{"/home/dpayonk/src/magic-tutorial/src/index.js":"1","/home/dpayonk/src/magic-tutorial/src/reportWebVitals.js":"2","/home/dpayonk/src/magic-tutorial/src/App.js":"3","/home/dpayonk/src/magic-tutorial/src/layout.js":"4","/home/dpayonk/src/magic-tutorial/src/components/Loader.js":"5","/home/dpayonk/src/magic-tutorial/src/routes/LoginIndex.js":"6","/home/dpayonk/src/magic-tutorial/src/routes/HomeIndex.js":"7","/home/dpayonk/src/magic-tutorial/src/routes/UserHomeIndex.js":"8","/home/dpayonk/src/magic-tutorial/src/services/AuthService.ts":"9","/home/dpayonk/src/magic-tutorial/src/services/AccountProfileService.ts":"10","/home/dpayonk/src/magic-tutorial/src/models/AccountProfile.ts":"11","/home/dpayonk/src/magic-tutorial/src/Configuration.ts":"12","/home/dpayonk/src/magic-tutorial/src/components/AuthForm.js":"13","/home/dpayonk/src/magic-tutorial/src/components/MagicProfileComponent.js":"14","/home/dpayonk/src/magic-tutorial/src/models/AuthenticationProfile.ts":"15"},{"size":500,"mtime":1611759565200,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1611759565200,"results":"18","hashOfConfig":"17"},{"size":2507,"mtime":1611964781262,"results":"19","hashOfConfig":"17"},{"size":788,"mtime":1611781826550,"results":"20","hashOfConfig":"17"},{"size":2900,"mtime":1611792698930,"results":"21","hashOfConfig":"17"},{"size":3022,"mtime":1611958346582,"results":"22","hashOfConfig":"17"},{"size":697,"mtime":1611790451230,"results":"23","hashOfConfig":"17"},{"size":4783,"mtime":1611963336992,"results":"24","hashOfConfig":"17"},{"size":3502,"mtime":1611961642342,"results":"25","hashOfConfig":"17"},{"size":4470,"mtime":1611961858232,"results":"26","hashOfConfig":"17"},{"size":1528,"mtime":1611962681142,"results":"27","hashOfConfig":"17"},{"size":217,"mtime":1611781016210,"results":"28","hashOfConfig":"17"},{"size":5027,"mtime":1611961825672,"results":"29","hashOfConfig":"17"},{"size":2550,"mtime":1611963379592,"results":"30","hashOfConfig":"17"},{"size":618,"mtime":1611958349697,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"geaatu",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"34"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/home/dpayonk/src/magic-tutorial/src/index.js",[],["73","74"],"/home/dpayonk/src/magic-tutorial/src/reportWebVitals.js",[],"/home/dpayonk/src/magic-tutorial/src/App.js",["75","76","77"],"import React from \"react\"\nimport { navigate, Router } from \"@reach/router\"\nimport Loader from \"./components/Loader\";\nimport { Logger } from 'payonkjs';\nimport AuthForm from './components/AuthForm';\nimport AuthService from \"./services/AuthService\";\nimport AccountProfileService from \"./services/AccountProfileService\";\nimport Layout from './layout';\nimport LoginIndex from './routes/LoginIndex';\nimport HomeIndex from './routes/HomeIndex';\nimport UserHomeIndex from './routes/UserHomeIndex';\n\nclass PrivateRoute extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    if (this.props.isLoggedIn !== true) {\n      navigate('/login');\n      return (<LoginIndex />);\n    }\n\n    return (\n      <UserHomeIndex />\n    )\n  }\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoggedIn: false,\n      status: 'loading',\n    };\n    this.authService = new AuthService();\n\n    // This requires a lot of coordination, but the app is the only place we know \n    // we can subscribe to global updates (besides singletons loaded here? )\n    // perhaps instantiate statestore here?\n    // UserStore.onSessionUpdate(function (model) {\n    //   Logger.info(\"received update, new Model\", model);\n    //   self.setState({ userSession: model });\n    // });\n  }\n\n  async componentDidMount() {\n    let isLoggedIn = false;\n\n    try {\n\n      if (window.location.search.length > 0) {\n        // Looking for magic credential in query string\n        let authenticationProfile = await this.authService.onAuthenticationRedirectCallback();\n        let accountProfile = AccountProfileService.getInstance().createProfile(authenticationProfile);\n        Logger.alert('app.js: Create a new profile for you.', accountProfile);\n      }\n\n      isLoggedIn = await this.authService.isLoggedIn();\n    } catch (error) {\n      Logger.error(\"app.js: An exception occurred loading the app.\", error);\n    }\n\n    this.setState({\n      status: 'mounted', isLoggedIn: isLoggedIn, status: 'mounted'\n    });\n  }\n\n  render() {\n\n    let location = \"Home\";\n    if (this.state.status === 'loading') {\n      return (<Loader title=\"Hang tight, starting up the app!\" />)\n    }\n\n    return (\n      <Layout location={location}>\n        <Router basepath=\"/\">\n          <LoginIndex path=\"/login\" />\n          <PrivateRoute isLoggedIn={this.state.isLoggedIn} path=\"/home\" />\n          <HomeIndex default path=\"/\" />\n        </Router>\n      </Layout>\n    );\n  }\n}\n\nexport default App","/home/dpayonk/src/magic-tutorial/src/layout.js",["78"],"import React from 'react';\n\nexport default ({ children, location }) => {\n\n    let header = null;\n\n    return (\n           \n\n            <div>\n                {header}\n                < div\n                    style={{\n                        minWidth: '75vw',\n                        maxWidth: '75vw',\n                        marginLeft: 'auto',\n                        marginRight: 'auto',\n                        minHeight: 'calc(100vh - 42px)',\n                    }}\n                >\n                    {children}\n                </div >\n                <footer\n                    style={{\n                        textAlign: 'center',\n                        padding: `0 20px 80px 0`,\n                    }}\n                >\n\n                </footer>\n            </div >\n    )\n}\n","/home/dpayonk/src/magic-tutorial/src/components/Loader.js",[],"/home/dpayonk/src/magic-tutorial/src/routes/LoginIndex.js",["79"],"import React from 'react'\nimport Layout from '../layout'\nimport Loader from '../components/Loader';\nimport AuthForm from '../magic/AuthForm';\nimport {Logger} from  'payonkjs';\nimport AuthService from '../services/AuthService';\nimport AccountProfileService from '../services/AccountProfileService';\n\nclass LoginIndex extends React.Component {\n    // User should already be authenticated and validated from the app.js\n    // consider changing this to a confirmation page of sorts to enter in \n    // other information and create/edit or tutorial\n    constructor(props) {\n        super(props);\n        const environment = 'development';\n        this.state = {\n            environment: environment,\n            status: \"initialized\",\n            isLoggedIn: false,\n            accountService: new AccountProfileService(),\n            alert: \"\"\n        }\n        this.authService = AuthService.getInstance();\n    }\n\n    async componentDidMount() {\n        let alert = \"\";\n\n        let isLoggedIn = await this.authService.isLoggedIn();\n        if (isLoggedIn) {\n            alert = `Welcome Back`;\n            let authenticationProfile = await this.authService.getAuthenticationProfile();\n            if (authenticationProfile !== null) {\n                let authorized = await this.state.accountService.fetchAuthorizationStatus(authenticationProfile.emailAddress, 'feed');\n                this.setState({ emailAddress: authenticationProfile.emailAddress, feedAuthorization: authorized });\n            }\n        }\n\n\n        this.setState({ alert: alert, isLoggedIn: isLoggedIn, status: 'mounted' });\n    }\n\n    render() {\n        let location = \"Login\";\n\n        if (this.state.status !== 'mounted') {\n            return (<Loader />);\n        }\n\n        if (this.state.isLoggedIn === true) {\n            return (\n                <Layout location={location}>\n                    <div className=\"container main-content\">\n                        <div>\n                            <h2>{this.state.alert}</h2>\n                        </div>\n                        <div className=\"columns has-text-centered\">\n                            <div className=\"column\">\n                                <div className=\"has-text-centered\">\n                                    <div>Install your apps</div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                </Layout>\n            )\n        } else {\n            return (\n                <Layout location={location}>\n                    <div className=\"main-content\">\n                        <div className=\"columns is-centered\">\n                            <div className=\"column is-half\">\n                                <h1>Hello</h1>                                \n                                <AuthForm />\n                            </div>\n                        </div>\n                    </div>\n                </Layout>\n            );\n        }\n    }\n}\n\nexport default LoginIndex\n","/home/dpayonk/src/magic-tutorial/src/routes/HomeIndex.js",[],"/home/dpayonk/src/magic-tutorial/src/routes/UserHomeIndex.js",["80","81","82"],"import React from 'react';\nimport { navigate } from \"@reach/router\"\nimport Loader from '../components/Loader';\nimport { Logger, UserRepository } from 'payonkjs';\n\nimport MagicProfileComponent from '../components/MagicProfileComponent';\nimport AccountProfileService from '../services/AccountProfileService';\nimport AuthService from '../services/AuthService';\nimport AuthenticationProfile from '../models/AuthenticationProfile';\nimport AccountProfile from '../models/AccountProfile';\n\n\nclass UserHomeIndex extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let emailAddress = UserRepository.getEmailAddress();\n        let didToken = UserRepository.getDidToken();\n        let accountProfile = null;\n        let authenticationProfile = null;\n\n        if (emailAddress !== '' && didToken != '') {\n            // bootstrapping account from Local data first if available\n            // should include JWT token\n            accountProfile = new AccountProfile();\n            accountProfile.emailAddress = emailAddress;\n            accountProfile.didToken = didToken;\n\n            authenticationProfile = new AuthenticationProfile(\n                accountProfile.emailAddress,\n                accountProfile.didToken);\n        }\n\n        this.state = {\n            alert: \"Hello, your name here\",\n            accountProfile: accountProfile,\n            authenticationProfile: authenticationProfile,\n            status: 'initialized'\n        }\n        this.accountProfileService = AccountProfileService.getInstance();\n\n\n        this.handleStateChange = this.handleStateChange.bind(this);\n        this.handleRefresh = this.handleRefresh.bind(this);\n    }\n\n    async componentDidMount() {\n        let accountProfile = await this.accountProfileService.fetchMyProfile();\n\n        if (accountProfile !== null) {\n            this.setState({ status: 'mounted', accountProfile: accountProfile });\n        } else {\n            this.setState({ status: 'mounted', alert: 'An error occurred fetching profile' });\n        }\n    }\n\n    async handleStateChange(){\n        debugger;\n        let authService = AuthService.getInstance();\n        if (authService.isLoggedIn() === false){\n            this.setState({authenticationProfile: null});\n            navigate('/login', { replace: true });\n        }\n    }\n\n    async handleRefresh() {\n\n        if (this.state.authenticationProfile !== null) {\n            let profileService = AccountProfileService.getInstance();\n            let accountProfile = await profileService.createProfile(this.state.authenticationProfile);\n            this.setState({ accountProfile: accountProfile });\n        } else {\n            alert(\"Authentication Profile is null.  You're going to need to reauthenticate!\");\n        }\n    }\n\n    renderJWTWidget() {\n        let jwtToken = UserRepository.getJWT();\n        if (jwtToken === null || jwtToken === \"\") {\n            return (<div>\n                <button onClick={this.handleRefresh} className=\"button is-secondary\">\n                    Create Profile\n                </button>\n            </div>);\n        } else {\n            return (<div>\n                <button onClick={this.handleRefresh} className=\"button is-secondary\">\n                    Refresh Session\n                </button>\n            </div>);\n        }\n        return (<div>Session expires in</div>);\n    }\n\n\n    render() {\n        if (this.state.status !== 'mounted') {\n            return (<Loader title='Loading Home' />);\n        }\n        if (this.state.accountProfile === null) {\n            return (<div>There is no homepage to load</div>);\n        }\n\n        const accountProfile = this.state.accountProfile;\n        const authenticationProfile = this.state.authenticationProfile;\n\n        return (\n            <div className=\"container main-content\">\n                <div className=\"columns is-centered has-text-centered\">\n                    <div className=\"column is-four-fifths\">\n                        <h1>My Profile</h1>\n                        <h2>{this.state.alert}</h2>\n                        <MagicProfileComponent\n                            emailAddress={accountProfile.emailAddress}\n                            publicAddress={authenticationProfile.publicAddress}\n                            didToken={authenticationProfile.didToken}\n                            onChange={this.handleStateChange}\n                        />\n                    </div>\n                    <div className=\"column is-one-fifths\">\n                        {this.renderJWTWidget()}\n                        Here is where authorized apps are displayed\n</div>\n\n                </div>\n                <div className=\"columns has-text-centered\">\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserHomeIndex;","/home/dpayonk/src/magic-tutorial/src/services/AuthService.ts",["83"],"import { Magic } from \"magic-sdk\";\nimport { Logger, StateStore, UserRepository } from \"payonkjs\";\nimport AuthenticationProfile from \"../models/AuthenticationProfile\";\nimport Configuration from \"../Configuration\";\n\nclass AuthService {\n  static SINGLETON: AuthService;\n  static getInstance(): AuthService {\n    if (this.SINGLETON !== undefined) {\n      return this.SINGLETON;\n    } else {\n      this.SINGLETON = new AuthService();\n      return this.SINGLETON;\n    }\n  }\n\n  getMagicFactory() {\n    // wrapped this in order to make server side NodeJS compilation work with Gatsby\n    return new Magic(Configuration.MAGIC_PUBLISHABLE_KEY);\n  }\n\n  async isLoggedIn() {\n    const isLoggedIn = await this.getMagicFactory().user.isLoggedIn();\n    Logger.info(`AuthService.isLoggedIn():`, isLoggedIn);\n    return isLoggedIn;\n  }\n\n  async logout() {\n    let m = this.getMagicFactory();\n    m.user.logout();\n    // remove from localStorage as well\n    UserRepository.clearAuthentication();\n  }\n\n  async loginMagic(emailAddress: string) {\n    // Method to start authentication,\n    UserRepository.storeEmail(emailAddress);\n    let didToken = await this.getMagicFactory().auth.loginWithMagicLink({\n      email: emailAddress,\n      showUI: true,\n      redirectURI: this.getRedirectUri(),\n    });\n    let newDidToken = await this.getMagicFactory().user.getIdToken({\n      lifespan: 999999999999999,\n    });\n    debugger;\n    // let did = await magic.user.getidToken({ lifespan: 999999999999999 });\n    if (didToken !== null) {\n      this.saveAuthentication(didToken);\n    }\n  }\n\n  // Move to AccountProfileService\n  async saveAuthentication(\n    didToken: string\n  ): Promise<AuthenticationProfile | null> {\n    UserRepository.storeKey(\"didToken\", didToken);\n    UserRepository.storeKey(\"updatedAt\", new Date().toISOString());\n    let subscribers = StateStore.publishEvent(\"onLogin\", {\n      didToken: didToken,\n    });\n    Logger.info(`Subscribers notified:`, subscribers);\n    let emailAddress = UserRepository.getEmailAddress();\n    if (emailAddress !== null) {\n      return new AuthenticationProfile(emailAddress, didToken);\n    } else {\n      return null;\n    }\n  }\n\n  async onAuthenticationRedirectCallback(): Promise<AuthenticationProfile | null> {\n    // Method called by redirect (from app.js)\n    let didToken = await this.getMagicFactory().auth.loginWithCredential();\n    if (didToken !== null) {\n      let authenticationProfile = await this.saveAuthentication(didToken);\n      return authenticationProfile;\n    }\n    return null;\n  }\n\n  getRedirectUri() {\n    const appUrl = Configuration.AUTH_CALLBACK_ROUTE;\n    return `${window.location.protocol}//${window.location.host}${appUrl}`;\n  }\n\n  async getAuthenticationProfile(): Promise<AuthenticationProfile | null> {\n    if (await this.isLoggedIn()) {\n      try {\n        const {\n          issuer,\n          email,\n          publicAddress,\n        } = await this.getMagicFactory().user.getMetadata();\n        const didToken = await this.getMagicFactory().user.getIdToken();\n\n        if (email !== null && issuer !== null && publicAddress !== null) {\n          let authProfile = new AuthenticationProfile(email, didToken);\n          authProfile.issuer = issuer;\n          authProfile.publicAddress = publicAddress;\n          return authProfile;\n        }\n      } catch (error) {\n        Logger.error(\n          `Auth service had a problem getting magic metadata`,\n          error\n        );\n      }\n    }\n    return null;\n  }\n}\n\nexport default AuthService;\n",["84","85"],"/home/dpayonk/src/magic-tutorial/src/services/AccountProfileService.ts",["86"],"import { Logger, BaseService, ISerializableObject, IParsedResponse, UserRepository } from \"payonkjs\";\n\nimport AccountProfile from \"../models/AccountProfile\";\nimport AuthenticationProfile from \"../models/AuthenticationProfile\";\nimport Configuration from \"../Configuration\";\n\nclass AccountProfileService extends BaseService {\n  static SINGLETON: AccountProfileService;\n\n  static getInstance(): AccountProfileService {\n    if (this.SINGLETON !== undefined) {\n      return this.SINGLETON;\n    } else {\n      this.SINGLETON = new AccountProfileService(Configuration.BACKEND_URL);\n      return this.SINGLETON;\n    }\n  }\n\n  endpoints() {\n    const apiUrl = this.baseUrl;\n    return {\n      authorizedRouteUrl: { url: `${apiUrl}/user/authorized` },\n      myProfileRouteUrl: { url: `${apiUrl}/user/me` },\n      createProfileRouteUrl: { url: `${apiUrl}/profile/create` },\n    };\n  }\n\n  async createProfile(\n    authenticationProfile: AuthenticationProfile\n  ): Promise<ISerializableObject | null> {\n    // public_address: authenticationProfile.publicAddress,\n    // issuer: authenticationProfile.issuer\n    let createProfileRequestSchema = {\n      email_address: authenticationProfile.emailAddress,\n      did_token: authenticationProfile.didToken,\n      issuer: authenticationProfile.issuer,\n    };\n    try {\n      let { ok, model, data, errors } = await this.apiPost(\n        this.endpoints().createProfileRouteUrl.url,\n        createProfileRequestSchema,\n        AccountProfile\n      );\n\n      if (ok && errors === \"\") {\n        if (data.jwt_token !== undefined) {\n          Logger.alert(`A new JWT token was issued`, data.jwt_token);\n          UserRepository.publishJWT(data.jwt_token);\n        }\n        return model;\n      }\n    } catch (error) {\n      Logger.error(`An exception occured creating profile`, error);\n    }\n    return null;\n  }\n\n  // could help with context (know who you are) vs. regular rest call\n  async fetchMyProfile(): Promise<AccountProfile | null> {\n    try {\n      debugger;\n      // this should amost always have a jwt toke\n      let { ok, model, errors } = await this.apiGet(\n        this.endpoints().myProfileRouteUrl.url,\n        { permission: \"my_profile\" },\n        AccountProfile\n      );\n\n      if (ok && errors === \"\") {\n        return model as AccountProfile;\n      } else {\n        Logger.warn(\n          \"AccountProfileService.fetchMyProfile: Permission error\",\n          errors\n        );\n        // This is mostly a permission error\n      }\n    } catch (error) {\n      Logger.error(\n        `AccountProfileService.fetchMyProfile: Exception in BaseService`,\n        error\n      );\n      return null;\n    }\n    return null;\n  }\n\n  async fetchAuthorizationStatus(\n    emailAddress: string,\n    permissionName: string\n  ): Promise<boolean> {\n    let variables = {\n      email_address: emailAddress,\n      permissionName: permissionName,\n    };\n    if (this.hasJWT() === false) {\n      Logger.alert(\n        \"Checking authorization as a public user.  Please make sure to create a session\",\n        {}\n      );\n    }\n\n    Logger.info(\n      `Checking permission ${permissionName} for email:`,\n      emailAddress\n    );\n    try {\n      let response = await fetch(this.endpoints().authorizedRouteUrl.url, {\n        method: \"POST\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        headers: this.generateHeaders(),\n        body: JSON.stringify(variables),\n      });\n      let jsonResponse = await response.json();\n      Logger.info(`AuthService.getAuthorizationProfile:`, jsonResponse);\n      if (jsonResponse.data === undefined) {\n        throw new Error(\"Invalid Schema Response.  No data element defined\");\n      }\n      // [server url](payonk/controllers/is_authorized_url)\n      let data = jsonResponse.data; // changed to be more graphql like\n      // jsonResponse = {data: {authenticated: bool, authorized: bool}, errors: string}\n\n      if (jsonResponse.errors === \"\") {\n        if (data.authorized !== undefined || data.authorized !== null) {\n          return data.authorized;\n        }\n      } else {\n        Logger.error(\n          \"AccountProfileService.fetchAuthorizationStatus: Error in response\",\n          jsonResponse.errors\n        );\n      }\n    } catch (error) {\n      Logger.error(\n        \"An exception occurred trying to obtain authorization\",\n        error\n      );\n      // may need to set serverHealth to false\n    }\n    return false; // only returns true on happy path\n  }\n}\n\nexport default AccountProfileService;\n","/home/dpayonk/src/magic-tutorial/src/models/AccountProfile.ts",[],"/home/dpayonk/src/magic-tutorial/src/Configuration.ts",[],["87","88"],"/home/dpayonk/src/magic-tutorial/src/components/AuthForm.js",["89"],"import React, { Component } from \"react\"\nimport {UserRepository} from 'payonkjs';\nimport Loader from './Loader';\nimport AuthService from '../services/AuthService'\nimport AccountProfileService from \"../services/AccountProfileService\";\n\nclass AuthForm extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      alert: \"\",\n      authService: new AuthService(),\n      accountService: new AccountProfileService(),\n      emailInput: \"\",\n      fetchedAuthorization: false, isAuthorized: false,\n      fetchedLogin: false, isLoggedIn: false,\n      status: \"initialized\",\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleRegistration = this.handleRegistration.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.fetchLogin();\n    await this.fetchAuthorizationProfile();\n\n    if (this.state.authenticationProfile !== null) {\n      // This is too complex combiniing a profile with magic link, need better model\n      if (this.state.isAuthorized == true) {\n        this.setState({ emailInput: this.state.authenticationProfile.emailAddress });        \n      }\n    } else {\n      this.setState({ alert: \"Your profile could not be fetched\" });\n    }\n    this.setState({ status: 'mounted' });\n  }\n\n  async fetchLogin() {\n    if (this.state.fetchedLogin === false) {\n      const isLoggedIn = await this.state.authService.isLoggedIn();\n      this.setState({ isLoggedIn: isLoggedIn, fetchedLogin: true });\n      return isLoggedIn;\n    } else {\n      return this.state.isLoggedIn;       // fetch from cache\n    }\n  }\n\n  isValidEmail(emailText) {\n    return true;\n  }\n\n  async isAuthorized() {\n    if (this.state.fetchedAuthorization === false) {\n      await this.fetchAuthorizationProfile(); // authorization status set by getting profile\n      return this.state.isAuthorized;\n    } else {\n      return this.state.isAuthorized;       // fetch from cache\n    }\n  }\n\n  async fetchAuthorizationProfile() {\n    let isAuthorized = false;\n    let authenticationProfile = await this.state.authService.getAuthenticationProfile();\n\n    if (authenticationProfile !== null) {      \n      isAuthorized = await this.state.accountService.fetchAuthorizationStatus(authenticationProfile.emailAddress);\n      this.setState({\n        authenticationProfile: authenticationProfile,        \n      });\n    }\n    this.setState({ isAuthorized: isAuthorized, fetchedAuthorization: true });\n  }\n\n  handleChange(event) {\n    this.setState({ emailInput: event.target.value });\n  }\n\n  async handleRegistration(e) {\n    e.preventDefault();\n    if (this.isValidEmail(this.state.emailInput)) {\n      this.setState({ alert: \"Starting auth process, setting email...\" });\n      let didToken = await this.state.authService.loginMagic(this.state.emailInput);\n      UserRepository.publishLogin(this.state.emailInput, didToken);\n      debugger;\n    }\n  };\n\n  render() {\n\n    if (this.state.status !== 'mounted') {\n      return (<Loader title=\"...\" />);\n    }\n\n    if (this.state.isLoggedIn && this.state.isAuthorized) {\n      return (<div className=\"container\" style={{ minHeight: \"150px\", marginBottom: \"5vh\" }}>\n        <label style={{ fontSize: \"1.3rem\", fontWeight: \"700\", paddingBottom: \"10px\" }}>\n          {this.state.alert}\n        </label>\n        <div><p style={{ textIndent: \"20px\" }}>\n          Check out the <a className=\"\" href=\"/app\"> private feed</a> for new pics!\n            </p>\n        </div>\n      </div>);\n    } else if (this.state.isLoggedIn === true && this.state.isAuthorized === false) {\n      return this.renderUnauthorized();\n    } else {\n      return this.renderLoginForm();\n    }\n  }\n\n  renderUnauthorized() {\n    let email = this.state.authenticationProfile.emailAddress;\n    return (\n      <div>\n        <p style={{ fontSize: \"1.4rem\", textIndent: \"10px\", maxWidth: \"600px\" }}>\n          We don't have your email address ({email}) on file yet.  \n          <br/><br/>\n          Give us a few minutes to authorize you.\n          If you're impatient, send us a message.\n            </p>\n      </div>\n    )\n  }\n\n  renderLoginForm() {\n    return (<div>\n      <p>Register with email</p>\n\n      <form>\n        <div className=\"field\">\n          <label className=\"label\">Email</label>\n          <div className=\"control has-icons-left\">\n            <input style={{maxWidth: \"400px\"}} value={this.state.emailInput} onChange={this.handleChange} className=\"input \" type=\"email\" name=\"email\"\n              required=\"required\" placeholder=\"your@email.com\" />\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-envelope\"></i>\n            </span>\n          </div>\n\n        </div>\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <div className=\"field\">\n              <button onClick={this.handleRegistration} className=\"button is-light is-pull-right\" type=\"submit\">\n                Register\n          </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n    )\n  }\n};\n\n\nexport default AuthForm\n","/home/dpayonk/src/magic-tutorial/src/components/MagicProfileComponent.js",["90"],"import React from 'react'\nimport { Logger, UserRepository } from 'payonkjs';\nimport AuthService from '../services/AuthService'\n\n\nexport default ({ emailAddress, publicAddress, didToken, onChange }) => {\n    let alert = (didToken !== undefined && didToken !== \"\") ? \"Logged In\" : \"\";\n\n    debugger;\n    function handleLogout() {\n        debugger;\n        let service = AuthService.getInstance();\n        service.logout();\n        UserRepository.clearAll();\n        Logger.alert(\"You have been logged out!\");\n        onChange();\n        debugger;\n    };\n\n    return (\n        <div>\n\n            <div className=\"field\">\n                <div className=\"control\">\n                    <button onClick={handleLogout} className=\"button button-primary is-pulled-right\">Logout</button>\n                    <div className=\"\">{alert}</div>\n                </div>\n            </div>\n\n            <div id=\"email-control\" className=\"field\">\n                <label className=\"label\">Email</label>\n                <div className=\"control has-icons-left\">\n                    <input readOnly=\"readonly\" value={emailAddress} className=\"input \" type=\"email\" name=\"email\"\n                        required=\"required\" placeholder=\"your@email.com\" />\n                    <span className=\"icon is-small is-left\">\n                        <i className=\"fas fa-envelope\"></i>\n                    </span>\n                </div>\n            </div>\n            <div id=\"public-address-control\" className=\"field\">\n                <label className=\"label\">Public Address</label>\n                <div className=\"control has-icons-left\">\n                    <input readOnly=\"readonly\" value={publicAddress}\n                        className=\"input \" name=\"publicAddress\"\n                        required=\"required\" />\n                    <span className=\"icon is-small is-left\">\n                        <i className=\"fas fa-lock\"></i>\n                    </span>\n                </div>\n\n            </div>\n            <div id=\"public-address-control\" className=\"field\">\n                <label className=\"label\">Magic Access Token (DID)</label>\n                <div className=\"control has-icons-left\">\n                    <input readOnly=\"readonly\" value={didToken}\n                        className=\"input \" name=\"publicAddress\"\n                        required=\"required\" />\n                    <span className=\"icon is-small is-left\">\n                        <i className=\"fas fa-lock\"></i>\n                    </span>\n                </div>\n            </div>\n        </div>\n    )\n}","/home/dpayonk/src/magic-tutorial/src/models/AuthenticationProfile.ts",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":5,"column":8,"nodeType":"97","messageId":"98","endLine":5,"endColumn":16},{"ruleId":"99","severity":1,"message":"100","line":15,"column":3,"nodeType":"101","messageId":"102","endLine":17,"endColumn":4},{"ruleId":"103","severity":1,"message":"104","line":68,"column":50,"nodeType":"105","messageId":"106","endLine":68,"endColumn":56},{"ruleId":"107","severity":1,"message":"108","line":3,"column":1,"nodeType":"109","endLine":33,"endColumn":2},{"ruleId":"95","severity":1,"message":"110","line":5,"column":9,"nodeType":"97","messageId":"98","endLine":5,"endColumn":15},{"ruleId":"95","severity":1,"message":"110","line":4,"column":10,"nodeType":"97","messageId":"98","endLine":4,"endColumn":16},{"ruleId":"111","severity":1,"message":"112","line":22,"column":45,"nodeType":"113","messageId":"106","endLine":22,"endColumn":47},{"ruleId":"114","severity":1,"message":"115","line":92,"column":9,"nodeType":"116","messageId":"117","endLine":92,"endColumn":48},{"ruleId":"118","severity":1,"message":"119","line":43,"column":9,"nodeType":"97","messageId":"98","endLine":43,"endColumn":20},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"118","severity":1,"message":"120","line":1,"column":52,"nodeType":"97","messageId":"98","endLine":1,"endColumn":67},{"ruleId":"91","replacedBy":"121"},{"ruleId":"93","replacedBy":"122"},{"ruleId":"111","severity":1,"message":"123","line":32,"column":35,"nodeType":"113","messageId":"106","endLine":32,"endColumn":37},{"ruleId":"107","severity":1,"message":"108","line":6,"column":1,"nodeType":"109","endLine":65,"endColumn":2},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'AuthForm' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-dupe-keys","Duplicate key 'status'.","ObjectExpression","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Logger' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","@typescript-eslint/no-unused-vars","'newDidToken' is assigned a value but never used.","'IParsedResponse' is defined but never used.",["124"],["125"],"Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]